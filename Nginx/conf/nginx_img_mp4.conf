
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {

    server {
		listen       80;
		server_name  test_local;
		root   /usr/local/nginx/html/test;

		location / {
			index  index.html index.htm;
		}
		

		# 匹配以 /images/ 开头的 URI，并且以 .jpg、.gif 或 .png 结尾的文件
		location ~* /images/.*\.(jpg|gif|png)$ {

			# 只设置此项，以 JSON 格式输出有关图像的信息
			# image_filter size;

			# 确保响应是确保响应是 JPEG，GIF，PNG 或 WebP 格式的图像。否则，返回 415(不支持的媒体类型)错误
			image_filter test;

			# 对于长度超过500或者宽度超过300的图片会进行压缩，值可以为'-'，代表不进行匹配
			# 将长度超过的边压缩为指定长度，另外一个边等比缩放
			# 一次缩放后，如果'长'缩放结果'宽'还超过设置值，则继续缩放，最终'宽'为设定值，否则'长'为设定值
			image_filter resize 500 300;

			# image_filter rotate 90; 旋转角度值为 90 180 270
			# 需要由resize或者rotate带动触发，默认是75
			image_filter_jpeg_quality 30;

			# 默认缓冲区大小为1M，如果图片超过此大小，会报415 Unsupported Media Type 错误
			image_filter_buffer 10M;
		}

		# 匹配视频请求
		location /videos/ {
			# alias 指令用于将请求的 URI 映射到文件系统的实际路径，因为前面有定义root，这里可不配
			alias /usr/local/nginx/html/test/videos/;
			types {
				# 定义了当请求的文件扩展名为 m3u8 时，Nginx 应该使用 application/vnd.apple.mpegurl 这个 MIME 类型
				application/vnd.apple.mpegurl m3u8;
				# 定义了当请求的文件扩展名为 mp4 时，Nginx 应该使用 video/mp4 这个 MIME 类型
				video/mp4 mp4;
			}
			# 启用了 Nginx 的 MP4 模块，该模块允许 Nginx 处理 MP4 文件的特定请求，如 HTTP Range 请求，允许客户端请求视频文件的特定部分
			mp4;
		}
	}
}
