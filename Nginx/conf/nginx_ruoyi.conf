
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # 全局设置，影响所有server块，允许单个图片的大小
    client_max_body_size 100M;
    # 当 Nginx 服务器处理请求时，使用 MIME 类型来正确设置 HTTP 响应的 Content-Type 头部，以便浏览器能够正确处理和显示内容
    include       mime.types;
    # 如果请求的文件没有在 mime.types 中定义对应的扩展名，Nginx 将使用这个默认类型，提示用户下载文件
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    # 允许 Nginx 直接在内核空间中传输文件，而不需要将文件数据复制到用户空间。这可以显著提高文件传输的效率，减少 CPU 的使用
    sendfile        on;
    #tcp_nopush     on;

    # 设置Keep-Alive超时时间
    keepalive_timeout  65s;
    # 设置每个连接的最大请求数
    keepalive_requests 100;

    # 可以显式设置Connection头，但通常不需要，因为Nginx默认会根据HTTP版本处理
    # 如果需要显式设置Keep-Alive，可以在响应头中添加
    add_header Connection Keep-Alive;

    # 想要关闭连接，可以设置Close
    # add_header Connection Close;

    #gzip  on;
    # 启用gzip压缩
    gzip on;
	# 指定压缩级别，范围是1-9，数字越大压缩越多，但也会增加CPU负载
	gzip_comp_level 5;
	# 指定文件大小超过多少字节才进行压缩
	gzip_min_length 256;
	# 指定压缩是否适用于所有代理请求
	gzip_proxied any;
	# 在响应头中添加Vary: Accept-Encoding，以便缓存服务器根据不同的压缩方式缓存不同的响应
	gzip_vary on;
	# 指定要进行压缩的文件类型
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        # 默认使用HTTP/1.1，可以显式指定HTTP/1.0或HTTP/2
        # listen       80 http1.0;
        # listen       80 http2;
        listen       80;
        server_name  localhost;

        # 设置虚拟主机的根目录
        root   html/front/dist;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # 为特定的URL匹配请求设置根目录
        location / {
            index  index.html index.htm;
            # 用于指定文件的查找规则
            # $uri：表示代表客户端请求的 URI。这个变量包含了请求的路径，但不包括服务器名称或端口号
            # $uri/：表示在当前请求的URL路径后面添加/后的路径
            # /index.html：这是一个文件路径，Nginx 会尝试返回这个路径下的 index.html 文件
            # 首先，它会检查 $uri 是否指向一个存在的文件。
            # 如果 $uri 指向的文件不存在，它会检查 $uri/ 是否指向一个存在的目录。
            # 如果 $uri/ 指向的目录存在，它会尝试返回该目录下的 index.html 文件。
            # 如果以上所有路径都找不到文件，Nginx 会返回 404 Not Found 错误
            try_files $uri $uri/ /index.html;
        }

        # 设置这些类型的文件在客户端缓存的过期时间为30天
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }
        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        # 将这些请求转发到对应地址上，并设置一些HTTP请求头信息
        # $http_host表示客户端请求的域名解析后的主机ip
        # $remote_addr表示客户端的IP地址
        # $proxy_add_x_forwarded_for表示通过代理服器转发的客户端IP地址

		# location ^~/api/：匹配任何以 /api/ 开头的 URI(location ^~ /api/ 的优先级更高，因为它是一个更具体的匹配)
		# location /api/：匹配任何以 /api/ 结尾的 URI
        location ^~/prod-api/  {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://localhost:9000/;
        }
        location ^~/dev-api/ {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://localhost:9000/;
        }
        location ^~/stage-api/ {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://localhost:9000/;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # 错误处理配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    server {
        listen       81;
        server_name  localhost;
        # 设置虚拟主机的根目录
        root   html/backend/dist;


        # 为特定的URL匹配请求设置根目录
        location / {
            index  index.html index.htm;
            # 用于指定文件的查找规则
            # $uri表示当前请求的URL路径
            # $uri/表示在当前请求的URL路径后面添加/后的路径
            try_files $uri $uri/ /index.html;
        }


        # 设置这些类型的文件在客户端缓存的过期时间为30天
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }
        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }


        # 将这些请求转发到对应地址上，并设置一些HTTP请求头信息
        # $http_host表示客户端请求的主机名
        # $remote_addr表示客户端的IP地址
        # $proxy_add_x_forwarded_for表示通过代理服器转发的客户端IP地址
        location ^~/prod-api/  {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://localhost:9000/;
        }
        location ^~/dev-api/ {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://localhost:9000/;
	      }
        location ^~/stage-api/ {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://localhost:9000/;
	      }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # 错误处理配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
